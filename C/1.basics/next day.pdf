%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Annots [
<</Type /Annot /Subtype /Link /Rect [56.6929133858267775 792.5570866141731585 242.4529133858268324 783.3570866141732267] /Border [0 0 0] /A <</S /URI /URI (https://www.compayz.com/?utm_source=download-gpt) >> >>
]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 4383
>>
stream
0.5670000000000001 w
0 G
BT
/F2 8 Tf
9.1999999999999993 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Chat-GPT PDF by CompayZ - www.compayz.com) Tj
ET
BT
/F1 8 Tf
9.1999999999999993 TL
0 g
56.6929133858267775 771.0238582677164914 Td
(Usuário: User) Tj
ET
BT
/F1 8 Tf
9.1999999999999993 TL
0 g
56.6929133858267775 756.8506299212598378 Td
(1 / 1) Tj
T* (#include <stdio.h>) Tj
T* () Tj
T* (int main\(void\)) Tj
T* ({) Tj
T* (int day , month , year ;) Tj
T* (int leapyear = 0;) Tj
T* (printf\("enter the day : "\);) Tj
T* (scanf\("%d",&day\);) Tj
T* () Tj
T* (printf\("enter the month : "\);) Tj
T* (scanf\("%d",&month\);) Tj
T* () Tj
T* (printf\("enter the year : "\);) Tj
T* (scanf\("%d",&year\);) Tj
T* () Tj
T* () Tj
T* (if \(month == 2\)) Tj
T* ({) Tj
T* (if \(year % 4 == 0 && \(year % 100 != 0 || year % 400 == 0\)\)) Tj
T* ({) Tj
T* (leapyear = 1;) Tj
T* (}) Tj
T* (}) Tj
T* (//30 ---> 31) Tj
T* (day ++ ;) Tj
T* () Tj
T* (// to know if the day is correct or not) Tj
T* (switch \(month\)) Tj
T* ({) Tj
T* (case 1:) Tj
T* (case 3:) Tj
T* (case 5:) Tj
T* (case 7:) Tj
T* (case 8:) Tj
T* (case 10:) Tj
T* (case 12:) Tj
T* (if \(day <= 31\)) Tj
T* (break;// That's OK :\)) Tj
T* (case 4:) Tj
T* (case 6:) Tj
T* (case 9:) Tj
T* (case 11:) Tj
T* (if \(day <= 30\)) Tj
T* (break;) Tj
T* (case 2: // February) Tj
T* (if \(day <= 29 && leapyear == 1\)) Tj
T* (break;) Tj
T* (else if \(day <= 28\)) Tj
T* (break;) Tj
T* (default:) Tj
T* (day = 1;) Tj
T* (month += 1; // month = month + 1) Tj
T* (if \(month > 12\)) Tj
T* ({) Tj
T* (month = 1;) Tj
T* (year += 1; // year = year + 1) Tj
T* (}) Tj
T* (}) Tj
T* (printf\("The Next Awesome Day is: %d/ %d/ %d\\n", day, month, year\);) Tj
T* () Tj
T* (}) Tj
T* (explain) Tj
ET
BT
/F1 8 Tf
9.1999999999999993 TL
0 g
56.6929133858267775 742.6774015748030706 Td
(Data: Saturday, October 7, 2023 at 2:00:24 PM - \(Africa/Cairo\)) Tj
ET
BT
/F1 8 Tf
9.1999999999999993 TL
0 g
56.6929133858267775 728.5041732283464171 Td
(URL: https://chat.openai.com/c/22cae983-ac3b-471d-8fd2-2b0e1d69b1bd) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 660.4726771653542983 Td
(This code is a simple C program to compute and display the next day's date given a current) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 637.7955118110235162 Td
(date. The user inputs a day, month, and year, and the program will output the subsequent day's) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 615.1183464566928478 Td
(date.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 569.7640157480313974 Td
(Here's a breakdown of how the code works:) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 524.4096850393700606 Td
( 1. Variable Declaration:) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 479.0553543307086102 Td
(c) Tj
ET
1. g
0. g
85.0393700787401627 428.0317322834645211 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 411.0238582677164914 Td
(    int day , month , year ;) Tj
ET
0. g
85.0393700787401627 405.3545669291337958 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 388.3466929133857661 Td
(    int leapyear = 0;) Tj
ET
0. g
85.0393700787401627 382.6774015748030706 425.2012598425196188 -22.677165354330711 re
f
1. g
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 274.9608661417322537 Td
( *  "day" ,  "month" , and  "year"  are to store the input values.) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 252.2837007874014716 Td
( *  "leapyear"  is a flag used to check if the given year is a leap year. 0 means it's not a leap) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 229.6065354330708033 Td
(year, and 1 means it is.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 184.2522047244093528 Td
( 2. Taking User Input:) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 161.5750393700786844 Td
(    ) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 138.8978740157479024 Td
(    * The program asks the user to input the day, month, and year.) Tj
ET
BT
/F1 8 Tf
9.1999999999999993 TL
0. g
526.2935433070865656 28.3464566929134207 Td
(Pág: 1 de 4) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 2954
>>
stream
0.5670000000000001 w
0 G
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 762.5199212598424765 Td
( 3. Checking for Leap Year:) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 717.1655905511811397 Td
(c) Tj
ET
1. g
0. g
85.0393700787401627 666.1419685039369369 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 649.1340944881889072 Td
(    if \(month == 2\)) Tj
ET
0. g
85.0393700787401627 643.4648031496062686 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 626.4569291338582389 Td
(    {) Tj
ET
0. g
85.0393700787401627 620.7876377952754865 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 603.7797637795274568 Td
(        if \(year % 4 == 0 && \(year % 100 != 0 || year % 400 == 0\)\)) Tj
ET
0. g
85.0393700787401627 598.1104724409448181 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 581.1025984251967884 Td
(        {) Tj
ET
0. g
85.0393700787401627 575.4333070866141497 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 558.42543307086612 Td
(            leapyear = 1;) Tj
ET
0. g
85.0393700787401627 552.7561417322833677 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 535.748267716535338 Td
(        }) Tj
ET
0. g
85.0393700787401627 530.0789763779526993 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 513.0711023622046696 Td
(    }) Tj
ET
0. g
85.0393700787401627 507.4018110236219741 425.2012598425196188 -22.677165354330711 re
f
1. g
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 399.6852755905511003 Td
( * If the month is February \( "month == 2" \), the code checks if the year is a leap year using the) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 377.0081102362204319 Td
(standard leap year conditions. If it's a leap year, the  "leapyear"  flag is set to 1.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 331.6537795275589815 Td
( 4. Incrementing the Day:) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 286.2994488188975311 Td
(c) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 263.6222834645668627 Td
( "day ++;" ) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 218.2679527559054122 Td
( * We increase the day by 1 because we want to get the next day's date.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 172.9136220472439618 Td
( 5. Checking and Adjusting the Date:) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 150.2364566929132934 Td
(    ) Tj
ET
BT
/F1 8 Tf
9.1999999999999993 TL
0. g
526.2935433070865656 28.3464566929134207 Td
(Pág: 2 de 4) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 3298
>>
stream
0.5670000000000001 w
0 G
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(    * The  "switch"  statement checks the month and adjusts the day and month values) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 762.5199212598424765 Td
(accordingly.) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 739.8427559055118081 Td
(      * For months with 31 days: If the day is more than 31, the day is set to 1 and the month is) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 717.1655905511811397 Td
(incremented.) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 694.4884251968503577 Td
(      * For months with 30 days: If the day is more than 30, the day is set to 1 and the month is) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 671.8112598425196893 Td
(incremented.) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 649.1340944881889072 Td
(      * For February: If it's a leap year and the day is more than 29 OR if it's not a leap year and) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 626.4569291338582389 Td
(the day is more than 28, the day is set to 1 and the month is incremented.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 581.1025984251967884 Td
( 6. Year Overflow:) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 535.748267716535338 Td
(c) Tj
ET
1. g
0. g
85.0393700787401627 484.7246456692912489 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 467.716771653543276 Td
(        if \(month > 12\)) Tj
ET
0. g
85.0393700787401627 462.0474803149605805 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 445.0396062992125508 Td
(        {) Tj
ET
0. g
85.0393700787401627 439.3703149606298552 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 422.3624409448818255 Td
(            month = 1;) Tj
ET
0. g
85.0393700787401627 416.69314960629913 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 399.6852755905511003 Td
(            year += 1; // year = year + 1) Tj
ET
0. g
85.0393700787401627 394.0159842519684048 425.2012598425196188 -22.677165354330711 re
f
BT
/F5 10 Tf
11.5 TL
1. g
85.0393700787401627 377.0081102362204319 Td
(        }) Tj
ET
0. g
85.0393700787401627 371.3388188976377364 425.2012598425196188 -22.677165354330711 re
f
1. g
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 263.6222834645668627 Td
( * If the month value after incrementing becomes more than 12, it's reset to 1 \(January\) and the) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 240.9451181102361943 Td
(year is incremented.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 195.5907874015747439 Td
( 7. Printing the Result:) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 172.9136220472439618 Td
(    * The resulting date is printed out to the user.) Tj
ET
1. g
BT
/F1 8 Tf
9.1999999999999993 TL
0. g
526.2935433070865656 28.3464566929134207 Td
(Pág: 3 de 4) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 1648
>>
stream
0.5670000000000001 w
0 G
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 762.5199212598424765 Td
(POTENTIAL ISSUES:) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 717.1655905511811397 Td
( 1. In the switch-case structure, there's a mistake: if the day is, say, 32 for January, the logic will) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 694.4884251968503577 Td
(fall through to the next case since there's no "break" in case of a wrong date for months with 31) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 671.8112598425196893 Td
(days.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 626.4569291338582389 Td
( 2. It would be clearer to avoid the "fall through" technique in the switch-case structure and use) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 603.7797637795274568 Td
(separate if-else conditions for handling month and day overflows. This would make the code) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 581.1025984251967884 Td
(easier to read and understand.) Tj
ET
1. g
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 535.748267716535338 Td
( 3. This code does not validate if the initial input \(day, month, year\) is a valid date. For instance,) Tj
ET
1. g
BT
/F1 11 Tf
12.6499999999999986 TL
0. g
56.6929133858267775 513.0711023622046696 Td
(users can input day values like 35, month values like 15, etc.) Tj
ET
1. g
BT
/F1 8 Tf
9.1999999999999993 TL
0. g
526.2935433070865656 28.3464566929134207 Td
(Pág: 4 de 4) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R ]
/Count 4
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
21 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
22 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
23 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
24 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 11 0 R
/F2 12 0 R
/F3 13 0 R
/F4 14 0 R
/F5 15 0 R
/F6 16 0 R
/F7 17 0 R
/F8 18 0 R
/F9 19 0 R
/F10 20 0 R
/F11 21 0 R
/F12 22 0 R
/F13 23 0 R
/F14 24 0 R
>>
/XObject <<
>>
>>
endobj
25 0 obj
<<
/Producer (jsPDF 2.5.1)
/CreationDate (D:20231007140024+03'00')
>>
endobj
26 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 27
0000000000 65535 f 
0000013280 00000 n 
0000015120 00000 n 
0000000015 00000 n 
0000000376 00000 n 
0000004811 00000 n 
0000004948 00000 n 
0000007954 00000 n 
0000008091 00000 n 
0000011441 00000 n 
0000011579 00000 n 
0000013355 00000 n 
0000013481 00000 n 
0000013612 00000 n 
0000013746 00000 n 
0000013884 00000 n 
0000014008 00000 n 
0000014137 00000 n 
0000014269 00000 n 
0000014405 00000 n 
0000014533 00000 n 
0000014660 00000 n 
0000014789 00000 n 
0000014922 00000 n 
0000015024 00000 n 
0000015373 00000 n 
0000015459 00000 n 
trailer
<<
/Size 27
/Root 26 0 R
/Info 25 0 R
/ID [ <B341C444E6FA4464A4DBC4D206EADE1D> <B341C444E6FA4464A4DBC4D206EADE1D> ]
>>
startxref
15563
%%EOF